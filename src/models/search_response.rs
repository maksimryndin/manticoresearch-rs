/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search.
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: info@manticoresearch.com
 * Generated by: https://openapi-generator.tech
 */

/// SearchResponse : Response object of a search request

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchResponse<T = serde_json::Value> {
    #[serde(rename = "took", skip_serializing_if = "Option::is_none")]
    pub took: Option<i32>,
    #[serde(rename = "timed_out", skip_serializing_if = "Option::is_none")]
    pub timed_out: Option<bool>,
    #[serde(rename = "aggregations", skip_serializing_if = "Option::is_none")]
    pub aggregations: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "hits", skip_serializing_if = "Option::is_none")]
    pub hits: Option<Box<crate::models::SearchResponseHits<T>>>,
    #[serde(rename = "profile", skip_serializing_if = "Option::is_none")]
    pub profile: Option<serde_json::Value>,
    #[serde(rename = "warning", skip_serializing_if = "Option::is_none")]
    pub warning: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl<T> SearchResponse<T> {
    /// Response object of a search request
    pub fn new() -> SearchResponse<T> {
        SearchResponse {
            took: None,
            timed_out: None,
            aggregations: None,
            hits: None,
            profile: None,
            warning: None,
        }
    }
}
