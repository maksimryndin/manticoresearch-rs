/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search.
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: info@manticoresearch.com
 * Generated by: https://openapi-generator.tech
 */

/// SearchRequest : Request object for search operation

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchRequest {
    #[serde(rename = "index")]
    pub index: String,
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<serde_json::Value>,
    #[serde(rename = "fulltext_filter", skip_serializing_if = "Option::is_none")]
    pub fulltext_filter: Option<serde_json::Value>,
    #[serde(rename = "attr_filter", skip_serializing_if = "Option::is_none")]
    pub attr_filter: Option<serde_json::Value>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    #[serde(rename = "max_matches", skip_serializing_if = "Option::is_none")]
    pub max_matches: Option<i32>,
    #[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
    pub sort: Option<Vec<serde_json::Value>>,
    #[serde(rename = "aggs", skip_serializing_if = "Option::is_none")]
    pub aggs: Option<Vec<crate::models::Aggregation>>,
    #[serde(rename = "expressions", skip_serializing_if = "Option::is_none")]
    pub expressions: Option<Vec<serde_json::Value>>,
    #[serde(rename = "highlight", skip_serializing_if = "Option::is_none")]
    pub highlight: Option<Box<crate::models::Highlight>>,
    #[serde(rename = "_source", skip_serializing_if = "Option::is_none")]
    pub source: Option<serde_json::Value>,
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "profile", skip_serializing_if = "Option::is_none")]
    pub profile: Option<bool>,
    #[serde(rename = "track_scores", skip_serializing_if = "Option::is_none")]
    pub track_scores: Option<bool>,
}

impl SearchRequest {
    /// Request object for search operation
    pub fn new(index: String) -> SearchRequest {
        SearchRequest {
            index,
            query: None,
            fulltext_filter: None,
            attr_filter: None,
            limit: None,
            offset: None,
            max_matches: None,
            sort: None,
            aggs: None,
            expressions: None,
            highlight: None,
            source: None,
            options: None,
            profile: None,
            track_scores: None,
        }
    }
}
